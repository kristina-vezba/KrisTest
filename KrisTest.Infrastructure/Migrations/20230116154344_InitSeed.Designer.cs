// <auto-generated />
using System;
using KrisTest.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KrisTest.Infrastructure.Migrations
{
    [DbContext(typeof(KrisTestContext))]
    [Migration("20230116154344_InitSeed")]
    partial class InitSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KrisTest.Domain.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("billing_address");

                    b.Property<LocalDateTime>("Closed")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("closed");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Instant>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_closed");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("modified_by");

                    b.Property<Instant?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date");

                    b.Property<LocalDateTime>("Open")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("open");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.HasKey("Id")
                        .HasName("pk_accounts");

                    b.ToTable("accounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BillingAddress = "Ostavi u prodavnici",
                            Closed = new NodaTime.LocalDateTime(1, 1, 1, 0, 0),
                            CreatedDate = NodaTime.Instant.FromUnixTimeTicks(0L),
                            IsClosed = false,
                            Open = new NodaTime.LocalDateTime(2000, 12, 20, 22, 30),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 2,
                            BillingAddress = "Bilo gde",
                            Closed = new NodaTime.LocalDateTime(1, 1, 1, 0, 0),
                            CreatedDate = NodaTime.Instant.FromUnixTimeTicks(0L),
                            IsClosed = false,
                            Open = new NodaTime.LocalDateTime(1, 1, 1, 0, 0),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 3,
                            BillingAddress = "Nije vazno",
                            Closed = new NodaTime.LocalDateTime(2022, 1, 16, 1, 30),
                            CreatedDate = NodaTime.Instant.FromUnixTimeTicks(0L),
                            IsClosed = true,
                            Open = new NodaTime.LocalDateTime(2002, 1, 1, 21, 20),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("KrisTest.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Instant>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("modified_by");

                    b.Property<Instant?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<int>("WebUserId")
                        .HasColumnType("integer")
                        .HasColumnName("web_user_id");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.ToTable("customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            Address = "Grobljanska 1, Mala Krsna",
                            CreatedDate = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Email = "mojmail@mail.com",
                            Phone = "0123456789",
                            Uid = new Guid("00000000-0000-0000-0000-000000000000"),
                            WebUserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 2,
                            Address = "Adresa neka, Neko Mesto",
                            CreatedDate = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Email = "mail.mail@opetmail.com",
                            Phone = "987654321",
                            Uid = new Guid("00000000-0000-0000-0000-000000000000"),
                            WebUserId = 0
                        });
                });

            modelBuilder.Entity("KrisTest.Domain.Entities.LineItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Instant>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("modified_by");

                    b.Property<Instant?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("integer")
                        .HasColumnName("shopping_cart_id");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.HasKey("Id")
                        .HasName("pk_line_items");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_line_items_order_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_line_items_product_id");

                    b.HasIndex("ShoppingCartId")
                        .HasDatabaseName("ix_line_items_shopping_cart_id");

                    b.ToTable("line_items", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = NodaTime.Instant.FromUnixTimeTicks(0L),
                            OrderId = 1,
                            Price = 49.950000000000003,
                            ProductId = 1,
                            Quantity = 5,
                            ShoppingCartId = 1,
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = NodaTime.Instant.FromUnixTimeTicks(0L),
                            OrderId = 1,
                            Price = 3.9500000000000002,
                            ProductId = 2,
                            Quantity = 10,
                            ShoppingCartId = 2,
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = NodaTime.Instant.FromUnixTimeTicks(0L),
                            OrderId = 2,
                            Price = 0.94999999999999996,
                            ProductId = 3,
                            Quantity = 150,
                            ShoppingCartId = 1,
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = NodaTime.Instant.FromUnixTimeTicks(0L),
                            OrderId = 2,
                            Price = 9.9499999999999993,
                            ProductId = 4,
                            Quantity = 6,
                            ShoppingCartId = 2,
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = NodaTime.Instant.FromUnixTimeTicks(0L),
                            OrderId = 2,
                            Price = 19.949999999999999,
                            ProductId = 5,
                            Quantity = 5,
                            ShoppingCartId = 1,
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("KrisTest.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Instant>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("modified_by");

                    b.Property<Instant?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("number");

                    b.Property<LocalDateTime>("Ordered")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("ordered");

                    b.Property<string>("ShipToAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ship_to_address");

                    b.Property<LocalDateTime>("Shipped")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("shipped");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<double>("Total")
                        .HasColumnType("double precision")
                        .HasColumnName("total");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_orders_account_id");

                    b.ToTable("orders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            CreatedDate = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Number = "1. order",
                            Ordered = new NodaTime.LocalDateTime(1, 1, 1, 0, 0),
                            ShipToAddress = "Ostavi kod komsije",
                            Shipped = new NodaTime.LocalDateTime(1, 1, 1, 0, 0),
                            Status = 0,
                            Total = 0.0,
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 1,
                            CreatedDate = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Number = "2. order",
                            Ordered = new NodaTime.LocalDateTime(1, 1, 1, 0, 0),
                            ShipToAddress = "Ostavi kod drugog komsije",
                            Shipped = new NodaTime.LocalDateTime(1, 1, 1, 0, 0),
                            Status = 0,
                            Total = 0.0,
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("KrisTest.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Instant>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("modified_by");

                    b.Property<Instant?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<LocalDateTime>("Paid")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("paid");

                    b.Property<double>("Total")
                        .HasColumnType("double precision")
                        .HasColumnName("total");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.HasKey("Id")
                        .HasName("pk_payments");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_payments_account_id");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_payments_order_id");

                    b.ToTable("payments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            CreatedDate = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Details = "neke sitnice",
                            OrderId = 1,
                            Paid = new NodaTime.LocalDateTime(2023, 1, 16, 0, 0),
                            Total = 100.0,
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("KrisTest.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Instant>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("modified_by");

                    b.Property<Instant?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.ToTable("products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Lopata",
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Balon",
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Papir",
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Kamen",
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Makaze",
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("KrisTest.Domain.Entities.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<LocalDateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Instant>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("modified_by");

                    b.Property<Instant?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<int>("WebUserId")
                        .HasColumnType("integer")
                        .HasColumnName("web_user_id");

                    b.HasKey("Id")
                        .HasName("pk_shopping_carts");

                    b.ToTable("shopping_carts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            Created = new NodaTime.LocalDateTime(2000, 2, 2, 2, 30),
                            CreatedDate = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000"),
                            WebUserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 3,
                            Created = new NodaTime.LocalDateTime(2012, 8, 21, 1, 0),
                            CreatedDate = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000"),
                            WebUserId = 2
                        });
                });

            modelBuilder.Entity("KrisTest.Domain.Entities.WebUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Instant>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("modified_by");

                    b.Property<Instant?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.HasKey("Id")
                        .HasName("pk_web_users");

                    b.ToTable("web_users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "UserOne",
                            Password = "IsPassword",
                            State = 1,
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "UserTwo",
                            Password = "JopetPassword",
                            State = 1,
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("KrisTest.Domain.Entities.Customer", b =>
                {
                    b.HasOne("KrisTest.Domain.Entities.Account", "Account")
                        .WithOne("Customer")
                        .HasForeignKey("KrisTest.Domain.Entities.Customer", "Id")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_customers_accounts_account_id");

                    b.HasOne("KrisTest.Domain.Entities.WebUser", "WebUser")
                        .WithOne("Customer")
                        .HasForeignKey("KrisTest.Domain.Entities.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_customers_web_users_web_user_id");

                    b.Navigation("Account");

                    b.Navigation("WebUser");
                });

            modelBuilder.Entity("KrisTest.Domain.Entities.LineItem", b =>
                {
                    b.HasOne("KrisTest.Domain.Entities.Order", "Order")
                        .WithMany("LineItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_line_items_orders_order_id");

                    b.HasOne("KrisTest.Domain.Entities.Product", "Product")
                        .WithMany("LineItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_line_items_products_product_id");

                    b.HasOne("KrisTest.Domain.Entities.ShoppingCart", "ShoppingCart")
                        .WithMany("LineItems")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_line_items_shopping_carts_shopping_cart_id");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("KrisTest.Domain.Entities.Order", b =>
                {
                    b.HasOne("KrisTest.Domain.Entities.Account", "Account")
                        .WithMany("Orders")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_orders_accounts_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("KrisTest.Domain.Entities.Payment", b =>
                {
                    b.HasOne("KrisTest.Domain.Entities.Account", "Account")
                        .WithMany("Payments")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payments_accounts_account_id");

                    b.HasOne("KrisTest.Domain.Entities.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payments_orders_order_id");

                    b.Navigation("Account");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("KrisTest.Domain.Entities.ShoppingCart", b =>
                {
                    b.HasOne("KrisTest.Domain.Entities.Account", "Account")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("KrisTest.Domain.Entities.ShoppingCart", "Id")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_shopping_carts_accounts_account_id");

                    b.HasOne("KrisTest.Domain.Entities.WebUser", "WebUser")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("KrisTest.Domain.Entities.ShoppingCart", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shopping_carts_web_users_web_user_id");

                    b.Navigation("Account");

                    b.Navigation("WebUser");
                });

            modelBuilder.Entity("KrisTest.Domain.Entities.Account", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("Payments");

                    b.Navigation("ShoppingCart")
                        .IsRequired();
                });

            modelBuilder.Entity("KrisTest.Domain.Entities.Order", b =>
                {
                    b.Navigation("LineItems");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("KrisTest.Domain.Entities.Product", b =>
                {
                    b.Navigation("LineItems");
                });

            modelBuilder.Entity("KrisTest.Domain.Entities.ShoppingCart", b =>
                {
                    b.Navigation("LineItems");
                });

            modelBuilder.Entity("KrisTest.Domain.Entities.WebUser", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("ShoppingCart");
                });
#pragma warning restore 612, 618
        }
    }
}
